TODO List
---------
+ Add maps of the subtables (to allow multiple rows)
	+ I.e A child can lookup its parent
+ Include a locking mechanism in database
	+ Add SELECT FOR UPDATE to SELECT statements for locking (Maybe?)
+ Build a sorting tool to get relevant data by various indexes
	+ Template functions to get specific values from an array (is this possible? )
+ Filter on queues:
	- If DELETE and INSERT (remove from both, and destroy object)
+ Timed objects to store the data
	- This is the pointer that owns the object
	- All other uses are weak references
+ Functions to group objects (for ease of reference)
	- Part of caching idea
+ Children can look up parent objects by foreign key
+ Try,Except handlers for failed query

---- Python TODO ----
- Add foreign key lookup
- Add caching ability
- Add cache functions
- Add transaction queue functionality
- SELECT statement to be a static string (not an anonymous string)
- Add a setup.py file

==== DONE ====
+ Add regex to parse DB inputs to make sure they are safe
+ Create type specific regex templates
+ For string inputs allow free-text regex from the child library
+ schema to implement all the class processing for parent and children (avoids looped dependencies)
+ Sub table primary key
+ Sub table secondary key (indexes!)
+ Sub table foreign key
+ Make library for base classes of demodb
+ Make caching work on db for quick behaviour
+ Store child data as an array of stored pointers
+ Implement the update delete insert queries
+ Make query objects accessible from schema class and parent classes
