== README ==
============


================
== INTENTIONS ==
================
1) Base class for each row/record
2) Provide accessors to automatically store/update/insert data dependent on constructor used
3) Allow bulk transactions to interact with DB via DBTransaction
4) Provide a means to qualify the data that is stored in the DB (use unsafe version for retrieval)
5) All actions for a database are removed from the user. Only action is to "SaveData" or "Delete"


==============
== BUILDING ==
==============
1) Replace "database.sql" with your schema design

2) Run buildDBCPP.py to convert the schema into a C++ compliant structure and code

3) build libdbquery
	cd libdbquery
	make
	make install
	cd ../

	#NOTE: If you are running a test environment run to make the dynamic library linking point to this directory
		sudo ./create_ldconfig_link.sh

4) Build the schema
	make
	make install

5) Run in the stored procedures from the database folder
	psql -h localhost -d neurondb -U neuron -W
	\i <table_name>_procedures.sql

6) Build your own application
	#NOTES:
		- Link to libdbquery
		- Link to lib<schema_name> - This is your custom library


====================
== CODE STRUCTURE ==
====================
//1. Create connection object
DBConnection dbc(<dbURL>);
//2. Connect to the database
dbc.connectDB();
//3. Build a transaction object
DBTransaction dbt(dbc);
//4. Create schema class
Schema sc(dbc, dbt);
//5. Initialise schema class
sc.initialise(dbc);
//6. Build our objects
tBody b1 = sc.gettbody(1)
//7. Modify data
b1.setName('derek');
//8. New data
sc.gtBody('NewElement');
//9. Commit Changes
dbt.saveTransaction()
